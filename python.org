#+RESULTS: output
#+FILE: python.py
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args:python :exports both


* Basics
** Output to Console
#+begin_src python :results output :exports both
print('Hello World')
#+end_src

#+RESULTS:
: Hello World

By default print function will output the next ~print~ function in the next line.
#+begin_src python :results output :exports both
  print('Hello')
  print(' World!')
#+end_src

#+RESULTS:
: Hello
:  World!


Adding ~end~ parameter changes the last character in the print function.
The default ~end~ is ~\n~.
#+begin_src python :results output :exports both
  print('Hello', end='')
  print(' World!')
#+end_src

#+RESULTS:
: Hello World!

** Getting Input from Console
Getting input from the console and pass them to a variable
#+begin_src python :results output :exports both
  print('Give me your name')
  name = input()

  print ('Your name is ' + name )
#+end_src

#+RESULTS:
: Your name is James
Get input wihtout a print statement

#+begin_src python :results output :exports both
  name = input('Give me your name: ')

  print('Your name is ' + name)
#+end_src

#+RESULTS:
: Your name is James



Convert string to float or int

#+begin_src python :results output :exports both

   age = input('What is your age') # input() returns a string
   age = int(age) # 'age' is now an integer
   age = age + 5
   print('Your age will be ' + age + ' in the next five years' )
#+end_src
#+RESULTS:
: Your age will be 25 in the next five years.

** String Formatting
String formatting is the process of infusing things in the string dynamically and presenting the string.
*** % Operator Formatting.
Using the % format tells Python to substitute the value of name.
#+begin_src python :results output :exports both
  name = 'Slim Shady'
  print ('My name is %s' % name)
#+end_src

#+RESULTS:
: My name is Slim Shady

*** str.format()
You can use ~format()~ to do simple positional formatting
#+begin_src python :results output :exports both
  name = 'Slim Shady'
  print ('My name is {}'.format(name))
#+end_src

#+RESULTS:
: My name is Slim Shady

Or you can refer to your variable substitutions by name and use them in any order.

You can use ~format()~ to do simple positional formatting
#+begin_src python :results output :exports both
  name = 'Yoshikage Kira'
  age  = 33
  print ('My name is {name}, I am {age} years old.'.format(age=age,name=name))
#+end_src

#+RESULTS:
: My name is Yoshikage Kira, I am 33 years old.

*** f-strings
NOTE: This only works in Python version 3.6 or later.

This new way of formatting lets you use embedded python expressions inside string constants.

#+begin_src python :results output :exports both
  name = 'Yoshikage Kira'
  age  = 30
  print(f'My name is {name}. I am {30 + 3} years old')
#+end_src

#+RESULTS:
: My name is Yoshikage Kira. I am 33 years old


* Variables
Variables are containers for storing data values.
#+begin_src python :results output exports: both

  from pprint import pprint # Import pprint library to make the out pretty.

  foo = 'Lorem Ipsum' # string
  health = 200        # int
  mana   = 10.20      # float
  lucky_numbers = [4, 13, ] # list | can be any data type | MUTABLE

  body_parts    = ('head',   # Tuples | can be any data type | IMMUTABLE
                   'body',   # Immutable means that once created, it cannot
                   'legs',)  # modified after.

  user = {                        # Dict | Dictionary
      'name' : 'James',           # Dictionaries are used to store data values in key:value pairs
      'username': 'jamesp101',     # Dictionary cannot have the same key.
      'password': 'HelloWorld!',
      'age': 12,                  # The value can be of any data type
      'favcolors': ['red', 'blue'],
      'lucky_number': lucky_numbers
      }

  print(foo)
  print(health)
  print(mana)
  print(lucky_numbers)
  pprint(user)                    # Prettify output 
#+end_src

#+RESULTS:
#+begin_example
Lorem Ipsum
200
10.2
[4, 13]
{'age': 12,
 'favcolors': ['red', 'blue'],
 'lucky_number': [4, 13],
 'name': 'James',
 'password': 'HelloWorld!',
 'username': 'jamesp101'}
#+end_example
** Scope
The location where we can find a variable and also access it if required.

*** Global Scope
Global variables are the ones that are defined and declared outside any function. They can be used by any part of the program.
#+begin_src python :results output exports: both

  my_var = 12
  my_str = 'Hello World'

  def say_hello():
     print (my_str) # my_str variable can be called here

  say_hello()
  #+end_src

#+RESULTS:
: Hello World

*** Local Scope
Local scope variables are variables that lives only inside a block of code (e.g. function, conditionals, loops).

#+begin_src python :results output :exports both

  def say_hello ():
      my_str = 'Hello World'
      print (my_str)

  say_hello()
  #+end_src
Variables cannot go outside the block that belongs.

#+begin_src python :results output :exports both
  def hello():
      my_str = 'Hello World'
      print(my_str)

  print(my_str)
#+end_src

#+RESULTS:
: Traceback (most recent call last):
:  File "<stdin>", line 5, in <module>
: NameError: name 'my_str' is not defined

Think of the scope lifetime of a variable.
Once a block of code is finished executing, the variable inside will be also removed from the memory. 

#+begin_src python :results output :exports both

  import random

  def say_hello ():
      my_str = 12

      while my_str < 100:
          random = random.randrange(1,6) # Generate random number between 1-5
          my_str += random
          
#+end_src

The ~my_str~ variable lives throughout the function. it can be accessed inside the loop. While the ~random~ variable cannot go outside the loop due to its scope.



* Conditionals
Python supports the usual logical conditions from mathematics
- a == b
- a != b
- a < b
- a > b
- a <= b
- a >= b

These conditions can be used in several ways, most commonly in ~if statements~ and loops

#+begin_src python :results output :exports both

  a = 133
  b = 200

  if b > a:
      print("b is greater than a")

  else:
      print("b is less than a")
#+end_src

#+RESULTS:
: b is greater than a



#+begin_src python :results output :exports both
  
  a = 133
  b = 200

  if b > a:
      print("b is greater than a")

  elif b < a:
      print("b is less than a")

  else:
      print("They are equal")

      #+end_src

      #+RESULTS:
      : b is greater than a

** Match Statements
NOTE: This only works with Python *3.10* or newer.

In python we don't have a switch statement. Instead we can use the ~switch~ statement.

#+begin_src python :results output :exports both
  def print_status_code (code):
      match code:
          case "200":
              print("OK")
          case "404":
              print("Not Found")
          case "500":
              print("Internal Server Error")
          case _:
              print("Invalid Status code")

  print_status_code('200')
  print_status_code('777')
#+end_src

#+RESULTS:
: OK
: Invalid Status code


* Loops
** For Loops

For loop is used in iterating o
#+begin_src python :results output :exports both

  fruits = ["apple", "banana", "cherry"]
  for x in fruits:
      print (x)
      
#+end_src

Use ~enumerate()~ to get the number iteration. 

#+begin_src python :results output :exports both
  fruits = ["apple", "banana", "cherry"]
  for itr, x in enumerate(fruits):
      print (itr, x)
  
#+end_src

#+RESULTS:
: 0 apple
: 1 banana
: 2 cherry

A for loop with range.

#+begin_src python :results output :exports both
  for i in range(5):
      print(i)
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3
: 4
** While Loop
With the ~while~ loop we can execute a set of statements as long as a
condition is true.
#+begin_src python :results output :exports both
  i = 1
  while i < 6:
      print(i)
      i+=1
#+end_src

#+RESULTS:
: 1

: 2
: 3
: 4
: 5

While loop with else statement

#+begin_src python :results output :exports both
  i = 1
  while i < 6:
      print(i)
      i+=1

  else:
      print('i is no longer less than 6')
#+end_src

#+RESULTS:
: 1
: 2
: 3
: 4
: 5
: i is no longer less than 6



* Functions
A function is a block of code that runs when it is called.
 #+begin_src python :results output :exports both
  def my_function ():
    print("Hello from a function")
#+end_src

#+RESULTS:

** Calling a function
Before a function runs, it must be called.

#+begin_src python :results output :exports both
  def my_function ():
    print("Hello from a function")

  my_function()
#+end_src

#+RESULTS:
: Hello from a function

Functions are usefull for programmers to divide their programs into separate modules.


** Parameters and Arguments
Data can be passed into functions as arguments.
Arguments are specified after the function name, inside the parentheses.
You can add as many arguments as you want, just separate them with a comma.
#+begin_src python :results output :exports both
  def my_function (fname):        # Any data that will be passed will take the 'fname' variable
    print (f'My name is {fname}') 

  my_function('Slim shady')       # The value of 'fname' variable is 'Slim Shady'
  my_function('Yoshikage Kira')
  my_function('Giovanni Giorgio')
  my_function('Antonio Montaya')
#+end_src

#+RESULTS:
: My name is Slim shady
: My name is Yoshikage Kira
: My name is Giovanni Giorgio
: My name is Antonio Montaya

The argument data will be the parameter variable.



#+begin_src python :results output :exports both
  def display_name (fname, lname, age,):
      print (f'My name is {fname} {lname}. I am {age} years old.')

  display_name('Yoshikage', 'Kira', 33)
#+end_src

Arguments are the data that goes to the function call.

#+begin_src python :results output :exports both

  def square_nums (num):          # The 'num' is the parameter.
      return num ** 2

  my_num = 12
  result = square_nums(my_num)    # The 'my_num' is the argument.
  print(result)

#+end_src

#+RESULTS:
: 144s



The parameters *must be filled* with data or variables, else it returns an error.


#+RESULTS:
: My name is Yoshikage Kira. I am 33 years old.
*** Optional Parameters
Not all parameters are required. We can make some of the parameters *optional*.

For example the ~print()~ function.
~print()~ function provides us multiple optional parameters. (see the docs [[https://docs.python.org/3/library/functions.html#print][here]] ).

The ending character of each ~print()~ function is ~\n~.
We can change the value of it with an optional argument. 
#+begin_src python :results output :exports both
  print('Hello World')    # No optional arguments
  print('Hello', end='') # With optional Arguments
  print(' World', end='!')# With optional Arguments
#+end_src

#+RESULTS:
: Hello World
: Hello World!

In creating an optional parameter, it must have a default value if no arguments are provided.

#+begin_src python :results output :exports both

  def square_num(num=0):
      return num ** 2

  print(square_num(5))
  print(square_num())
#+end_src

#+RESULTS:
: 25
: 0


** Return
A return statement is used to *end* the execution of the function call and return a value.

#+begin_src python :results output :exports both
  def my_func():
    a = 12
    b = 3
    return
    a = b * a                     # This code will not be executed.

#+end_src
Note: Return statement cannot be used outside the function.



The value next to the return statement will be returned.

#+begin_src python :results output :exports both

  import random                   # Import random library

  def roll_dice():
      return random.randrange(1,7)  # Generate a random number between 0-6 and returns it.

  dice_num = roll_dice()         # The returned value will be passed to the 'dice_num'varaible
  # print(roll_dice())           # We can also print directly the function.

  if dice_num == 1:
      print('You won!')
  else:
      print('You lose!')
#+end_src

#+RESULTS:
: You lose!


* Exception Handling
Adding extensive error handling is crucial when developing maintainable code.

If you have a block of code that might fail, you can
manage any exceptions by placing an ~try:~ and ~except:~ block.
#+begin_src python :results output :exports both
  import random                   # Import Random library

  try:
      num = random.randrange(0, 11)    # Generate random number between 0,10
      result = 2 / num                 # If we get 0 in the 'num' variable, we wil get an error 
  except:
      print('Cannot divide zero') # This will run if 'num' variable is zero.
#+end_src

We can specify what we error we can make an exception.

#+begin_src python :results output :exports both
  try:
      num = input('Give me num: ' )               
      num = float (num)
      result = 2 / num
  except ValueError:              # If we cannot convert our input, this will run.
      print('Your input is wrong')
  except ZeroDivisionError:
      print('Cannot divide zero') # If the input is zero
  except Exception:
      print('An error occurred') # If there are other errors that occurs.

#+end_src

#+RESULTS:
: Give me num: An error occurred

We can have many exceptions in our try-except statement (see the built-in exceptions [[https://docs.python.org/3/library/exceptions.html][here]]).







* Class

Python is an object-oriented programming language.
Almost everything in python is an object, with its properties and methods.

A class is like an object constructor or a _blueprint_ for creating objects.


Create a class with a property named x.
#+begin_src python :results output :exports both
  class MyClass:
    x=5
#+end_src

Create an object named p1, and print the value of x:
#+begin_src python :results output :exports both
  class MyClass:
    x=5

  p1 = MyClass()
  print(p1.x)
#+end_src

#+RESULTS:
: 5


** __init__() function

All classes have a function called ~__init__()~, which is always executed when the class is being initiated.
Use the ~__init__()~ function to assign values to object properties or other operations that are necessary too do when the object is being created.


#+begin_src python :results output :exports both
  class Person:
    def __init__(self, name, age):
      self.name = name
      self.age = age
      
  p1 = Person('John', 37)

  print(p1.name)
  print(p1.age)
#+end_src

#+RESULTS:
: John
: 37


NOTE: The __init__() function is called automatically everytime the class is being used to create a new object.


** Object Methods
Objects can also contain methods. Methods in objects are functions that belong to the object.


#+begin_src python :results output :exports both
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)
p1.myfunc() 
#+end_src
** Self Parameter
The ~self~ parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.
It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class

#+begin_src python :results output :exports both
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc() 
#+end_src

#+RESULTS:
: Hello my name is John
** Pass Statement
~class~ definitions cannot be empty, but if you for some reason have a ~class~ definition with no content, put in the ~pass~ statement to avoid getting an error.

#+begin_src python :results output :exports both
class Person:
  pass
#+end_src

#+RESULTS:


* Data Structures
** Stack
#+begin_src python :results output :exports both

#+end_src
