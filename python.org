#+RESULTS: output
#+FILE: python.py
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args:python :exports both


* Basics
** Output to Console
#+begin_src python :results output :exports both
print('Hello World')
#+end_src

#+RESULTS:
: Hello World

By default print function will output the next ~print~ function in the next line.
#+begin_src python :results output :exports both
  print('Hello')
  print(' World!')
#+end_src

#+RESULTS:
: Hello
:  World!


Adding ~end~ parameter changes the last character in the print function.
The default ~end~ is ~\n~.
#+begin_src python :results output :exports both
  print('Hello', end='')
  print(' World!')
#+end_src

#+RESULTS:
: Hello World!

** Getting Input from Console
Getting input from the console and pass them to a variable
#+begin_src python :results output :exports both
  print('Give me your name')
  name = input()

  print ('Your name is ' + name )
#+end_src

#+RESULTS:
: Your name is James

** String Formatting
String formatting is the process of infusing things in the string dynamically and presenting the string.
*** % Operator Formatting.
Using the % format tells Python to substitute the value of name.
#+begin_src python :results output
  name = 'Slim Shady'
  print ('My name is %s' % name)
#+end_src

#+RESULTS:
: My name is Slim Shady

*** str.format()
You can use ~format()~ to do simple positional formatting
#+begin_src python :results output
  name = 'Slim Shady'
  print ('My name is {}'.format(name))
#+end_src

#+RESULTS:
: My name is Slim Shady

Or you can refer to your variable substitutions by name and use them in any order.

You can use ~format()~ to do simple positional formatting
#+begin_src python :results output
  name = 'Yoshikage Kira'
  age  = 33
  print ('My name is {name}, I am {age} years old.'.format(age=age,name=name))
#+end_src

#+RESULTS:
: My name is Yoshikage Kira, I am 33 years old.

*** f-strings
NOTE: This only works in Python version 3.6 or later.

This new way of formatting lets you use embedded python expressions inside string constants.

#+begin_src python :results output
  name = 'Yoshikage Kira'
  age  = 30
  print(f'My name is {name}. I am {30 + 3} years old')
#+end_src

#+RESULTS:
: My name is Yoshikage Kira. I am 33 years old


* Variables
Variables are containers for storing data values.
#+begin_src python :results output exports: both
foo = 'Lorem Ipsum' # string
health = 200        # int
mana   = 10.20      # float
lucky_numbers = [4, 13, ] # list | can be any data type | MUTABLE

body_parts    = ('head',   # Tuples | can be any data type | IMMUTABLE
                 'body',   # Immutable means that once created, it cannot
                 'legs',)  # modified after.



print(foo)
print(health)
print(mana)
print(lucky_numbers)
#+end_src

#+RESULTS:
: Lorem Ipsum
: 200
: 10.2
: [4, 13]
** Scope
The location where we can find a variable and also access it if required.

*** Global Scope
Global variables are the ones that are defined and declared outside any function. They can be used by any part of the program.
#+begin_src python :results output exports: both

  my_var = 12
  my_str = 'Hello World'

  def say_hello():
     print (my_str) # my_str variable can be called here

  say_hello()
  #+end_src

#+RESULTS:
: Hello World

*** Local Scope
Local scope variables are variables that lives only inside a block of code (e.g. function, conditionals, loops).

#+begin_src python :results output :exports both

  def say_hello ():
      my_str = 'Hello World'
      print (my_str)

  say_hello()
  #+end_src
Variables cannot go outside the block that belongs.

#+begin_src python :results output :exports both
  def hello():
      my_str = 'Hello World'
      print(my_str)

  print(my_str)
#+end_src

#+RESULTS:
: Traceback (most recent call last):
:  File "<stdin>", line 5, in <module>
: NameError: name 'my_str' is not defined

Think of the scope lifetime of a variable.
Once a block of code is finished executing, the variable inside will be also removed from the memory. 

#+begin_src python :results output :exports both

  import random

  def say_hello ():
      my_str = 12

      while my_str < 100:
          random = random.randrange(1,6) # Generate random number between 1-5
          my_str += random
          
#+end_src

The ~my_str~ variable lives throughout the function. it can be accessed inside the loop. While the ~random~ variable cannot go outside the loop due to its scope.



* Conditionals
Python supports the usual logical conditions from mathematics
- a == b
- a != b
- a < b
- a > b
- a <= b
- a >= b

These conditions can be used in several ways, most commonly in ~if statements~ and loops

#+begin_src python :results output :exports both

  a = 133
  b = 200

  if b > a:
      print("b is greater than a")

  else:
      print("b is less than a")
#+end_src

#+RESULTS:
: b is greater than a



#+begin_src python :results output :exports both
  
  a = 133
  b = 200

  if b > a:
      print("b is greater than a")

  elif b < a:
      print("b is less than a")

  else:
      print("They are equal")

      #+end_src

      #+RESULTS:
      : b is greater than a

** Match Statements
NOTE: This only works with Python *3.10* or newer.

In python we don't have a switch statement. Instead we can use the ~switch~ statement.

#+begin_src python :results output :exports both
  def print_status_code (code):
      match code:
          case "200":
              print("OK")
          case "404":
              print("Not Found")
          case "500":
              print("Internal Server Error")
          case _:
              print("Invalid Status code")

  print_status_code('200')
  print_status_code('777')
#+end_src

#+RESULTS:
: OK
: Invalid Status code


* Loops
** For Loops

For loop is used in iterating o
#+begin_src python :results output :exports both

  fruits = ["apple", "banana", "cherry"]
  for x in fruits:
      print (x)
      
#+end_src

Use ~enumerate()~ to get the number iteration. 

#+begin_src python :results output :exports both
  fruits = ["apple", "banana", "cherry"]
  for itr, x in enumerate(fruits):
      print (itr, x)
  
#+end_src

#+RESULTS:
: 0 apple
: 1 banana
: 2 cherry

A for loop with range.

#+begin_src python :results output :exports both
  for i in range(5):
      print(i)
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3
: 4
** While Loop
With the ~while~ loop we can execute a set of statements as long as a
condition is true.
#+begin_src python :results output :exports both
  i = 1
  while i < 6:
      print(i)
      i+=1
#+end_src

#+RESULTS:
: 1

: 2
: 3
: 4
: 5

While loop with else statement

#+begin_src python :results output :exports both
  i = 1
  while i < 6:
      print(i)
      i+=1

  else:
      print('i is no longer less than 6')
#+end_src

#+RESULTS:
: 1
: 2
: 3
: 4
: 5
: i is no longer less than 6



* Functions
A function is a block of code which only runs when it is called.

#+begin_src python :results output :exports both
  def my_function ():
    print("Hello from a function")
#+end_src

#+RESULTS:

** Calling a function
Before a function runs, first it must be called.

#+begin_src python :results output :exports both
  def my_function ():
    print("Hello from a function")

  my_function()
#+end_src

#+RESULTS:
: Hello from a function


** Arguments
Data can be passed into functions as arguments.
Arguments are specified after the function name, inside the parentheses.
You can add as many arguments as you want, just separate them with a comma.
#+begin_src python :results output :exports both
  def my_function (fname):
    print (f'My name is {fname}')

  my_function('Slim shady')
  my_function('Yoshikage Kira')
  my_function('Giovanni Giorgio')
  my_function('Antonio Montaya')
#+end_src

#+RESULTS:
: My name is Slim shady
: My name is Yoshikage Kira
: My name is Giovanni Giorgio
: My name is Antonio Montaya

*** Parameters
Arguments are often shortened to 
